name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  # 1. Gateway tests
  gateway:
    name: Gateway Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - name: Install Poetry
        run: pip install poetry

      - name: Install dependencies
        working-directory: gateway
        run: |
          poetry install
          poetry run pip install -e .

      - name: Run Gateway tests
        working-directory: gateway
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_API_VERSION: ${{ secrets.ANTHROPIC_API_VERSION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
        run: poetry run pytest --maxfail=1 --disable-warnings -q

  # 2. Python client tests
  python-client:
    name: Python Client Tests
    runs-on: ubuntu-latest
    needs: gateway
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.10'

      - run: pip install poetry

      - name: Install Python client deps
        working-directory: clients/python-client
        run: |
          poetry install
          poetry run pip install -e .

      - name: Run Python client tests
        working-directory: clients/python-client
        env:
          TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
        run: poetry run pytest --maxfail=1 --disable-warnings -q

  # 3. .NET client tests
  dotnet-client:
    name: .NET Client Tests
    runs-on: ubuntu-latest
    needs: [gateway, python-client]
    steps:
      - uses: actions/checkout@v4

      - name: Setup .NET 8
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: 8.0.x

      - name: Restore & Build & Test
        env:
          TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
        run: dotnet test clients/dotnet-client/LlmGateway.sln --no-restore --verbosity normal

  # 4. React/TypeScript client tests & build
  react-client:
    name: React/TS Client Tests
    runs-on: ubuntu-latest
    needs: [gateway, python-client]
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18.x'

      - name: Install dependencies
        working-directory: clients/react-client
        run: npm ci

      - name: Run React client tests
        working-directory: clients/react-client
        env:
          TEST_API_KEY: ${{ secrets.TEST_API_KEY }}
        run: npm test

      - name: Build React client
        working-directory: clients/react-client
        run: npm run build

      - name: Run Node/TS example
        working-directory: clients/react-client
        run: |
          npm ci
          # Create dist directory if it doesn't exist
          mkdir -p dist/examples
          # Compile the TS example into JS
          npx tsc --outDir dist/examples src/examples/node_example.ts
          # Execute with node
          node dist/examples/node_example.js

  # 5. Integration tests
  integration:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [gateway, python-client, dotnet-client, react-client]
    steps:
      - name: Check out code
        uses: actions/checkout@v4

      - name: Install Docker Compose
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Start the Gateway via Docker Compose
        working-directory: .
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          AZURE_OPENAI_ENDPOINT: ${{ secrets.AZURE_OPENAI_ENDPOINT }}
          AZURE_OPENAI_KEY: ${{ secrets.AZURE_OPENAI_KEY }}
          AZURE_OPENAI_API_VERSION: ${{ secrets.AZURE_OPENAI_API_VERSION }}
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
          ANTHROPIC_API_VERSION: ${{ secrets.ANTHROPIC_API_VERSION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
          PORT: 8000
          HOST: 0.0.0.0
          LOG_LEVEL: INFO
        run: |
          # Export environment variables so Docker Compose can access them
          export OPENAI_API_KEY="$OPENAI_API_KEY"
          export AZURE_OPENAI_ENDPOINT="$AZURE_OPENAI_ENDPOINT"
          export AZURE_OPENAI_KEY="$AZURE_OPENAI_KEY"
          export AZURE_OPENAI_API_VERSION="$AZURE_OPENAI_API_VERSION"
          export ANTHROPIC_API_KEY="$ANTHROPIC_API_KEY"
          export ANTHROPIC_API_VERSION="$ANTHROPIC_API_VERSION"
          export AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID"
          export AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"
          export AWS_DEFAULT_REGION="$AWS_DEFAULT_REGION"
          # Start the gateway
          docker compose -f docker-compose.ci.yml up -d

      - name: Wait for Gateway to become healthy
        run: |
          for i in $(seq 1 30); do
            if curl --silent --fail http://localhost:8000/health; then
              echo "Gateway is up!"
              exit 0
            fi
            echo "Waiting for gateway..."
            sleep 1
          done
          echo "Gateway failed to start" >&2
          echo "Gateway logs:"
          docker compose -f docker-compose.ci.yml logs gateway
          exit 1

      - name: Run Python example
        working-directory: clients/python-client
        run: |
          # Install the client in editable mode
          pip install -e .
          # Execute the example script
          python ../../examples/python_example.py

      - name: Run .NET example
        working-directory: tests/examples/dotnet-console
        run: |
          # Build & run the C# console that calls the gateway
          dotnet run

      - name: Run Node/TS example
        working-directory: clients/react-client
        run: |
          npm ci
          # Create dist directory if it doesn't exist
          mkdir -p dist/examples
          # Compile the TS example into JS
          npx tsc --outDir dist/examples src/examples/node_example.ts
          # Execute with node
          node dist/examples/node_example.js 